{"ast":null,"code":"export const performFetch = (url, options) => {\n  const headers = options ? options.headers || new Headers() : new Headers();\n  headers.append('mode', 'no-cors');\n  const mergedOptions = Object.assign({}, options, {\n    headers\n  });\n  return new Promise((resolve, reject) => {\n    fetch(url, Object.assign(mergedOptions)).then(response => {\n      response.json().then(json => {\n        if (response.ok) {\n          resolve(json);\n        } else {\n          reject({ ...json,\n            status: response.status\n          });\n        }\n      }).catch(error => {\n        reject({\n          error,\n          status: response.status\n        });\n      });\n    }, error => {\n      reject(error);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/nathan/Documents/src/binge-watched/client/src/api/BaseApiRemote.js"],"names":["performFetch","url","options","headers","Headers","append","mergedOptions","Object","assign","Promise","resolve","reject","fetch","then","response","json","ok","status","catch","error"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC5C,QAAMC,OAAO,GAAGD,OAAO,GAAGA,OAAO,CAACC,OAAR,IAAmB,IAAIC,OAAJ,EAAtB,GAAsC,IAAIA,OAAJ,EAA7D;AACAD,EAAAA,OAAO,CAACE,MAAR,CAAe,MAAf,EAAuB,SAAvB;AACA,QAAMC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,OAAlB,EAA2B;AAAEC,IAAAA;AAAF,GAA3B,CAAtB;AAEA,SAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,KAAK,CAACX,GAAD,EAAMM,MAAM,CAACC,MAAP,CAAcF,aAAd,CAAN,CAAL,CAAyCO,IAAzC,CACGC,QAAD,IAAc;AACZA,MAAAA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBE,IAAD,IAAU;AAC7B,YAAID,QAAQ,CAACE,EAAb,EAAiB;AACfN,UAAAA,OAAO,CAACK,IAAD,CAAP;AACD,SAFD,MAEO;AACLJ,UAAAA,MAAM,CAAC,EACL,GAAGI,IADE;AAELE,YAAAA,MAAM,EAAEH,QAAQ,CAACG;AAFZ,WAAD,CAAN;AAID;AACF,OATD,EASGC,KATH,CASUC,KAAD,IAAW;AAClBR,QAAAA,MAAM,CAAC;AACLQ,UAAAA,KADK;AAELF,UAAAA,MAAM,EAAEH,QAAQ,CAACG;AAFZ,SAAD,CAAN;AAID,OAdD;AAeD,KAjBH,EAkBGE,KAAD,IAAW;AACTR,MAAAA,MAAM,CAACQ,KAAD,CAAN;AACD,KApBH;AAsBD,GAvBM,CAAP;AAwBD,CA7BM","sourcesContent":["export const performFetch = (url, options) => {\n  const headers = options ? options.headers || new Headers() : new Headers();\n  headers.append('mode', 'no-cors');\n  const mergedOptions = Object.assign({}, options, { headers });\n\n  return new Promise((resolve, reject) => {\n    fetch(url, Object.assign(mergedOptions)).then(\n      (response) => {\n        response.json().then((json) => {\n          if (response.ok) {\n            resolve(json);\n          } else {\n            reject({\n              ...json,\n              status: response.status,\n            });\n          }\n        }).catch((error) => {\n          reject({\n            error,\n            status: response.status,\n          });\n        })\n      },\n      (error) => {\n        reject(error)\n      },\n    )\n  })\n}\n"]},"metadata":{},"sourceType":"module"}