{"ast":null,"code":"import { types } from 'mobx-state-tree';\nimport { ViewStore } from './ViewStore';\nimport { User } from './User';\nimport { getUsers, addUser } from '../api/User';\nexport const GlobalStore = types.model('GlobalStore', {\n  viewStore: ViewStore,\n  users: types.array(User)\n}).actions(self => ({\n  loadSelf() {\n    self.viewStore = ViewStore.create();\n    self.getUsers();\n  },\n\n  loadUsers(response) {\n    self.users = [];\n    const {\n      users\n    } = response;\n    users.forEach(user => {\n      let newUser = User.create();\n      newUser.setUserName(user.userName);\n      newUser.setFirstName(user.firstName);\n      newUser.setLastName(user.lastName);\n      self.users.push(newUser);\n    });\n  },\n\n  async getUsers() {\n    let response;\n\n    try {\n      response = await getUsers();\n      self.loadUsers(response);\n    } catch (error) {\n      let message = error;\n    }\n  },\n\n  async addUser(firstName, lastName, userName) {\n    let response;\n    let anotherResponse;\n\n    try {\n      response = await addUser(firstName, lastName, userName);\n      anotherResponse = await self.getUsers();\n    } catch (error) {\n      let message = error;\n    }\n  }\n\n}));","map":{"version":3,"sources":["/Users/nathan/Documents/src/binge-watched/client/src/models/GlobalStore.js"],"names":["types","ViewStore","User","getUsers","addUser","GlobalStore","model","viewStore","users","array","actions","self","loadSelf","create","loadUsers","response","forEach","user","newUser","setUserName","userName","setFirstName","firstName","setLastName","lastName","push","error","message","anotherResponse"],"mappings":"AAAA,SAASA,KAAT,QAAsB,iBAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,aAAlC;AAEA,OAAO,MAAMC,WAAW,GAAGL,KAAK,CAC7BM,KADwB,CAClB,aADkB,EACH;AACpBC,EAAAA,SAAS,EAAEN,SADS;AAEpBO,EAAAA,KAAK,EAAER,KAAK,CAACS,KAAN,CAAYP,IAAZ;AAFa,CADG,EAKxBQ,OALwB,CAKfC,IAAD,KAAW;AAClBC,EAAAA,QAAQ,GAAG;AACTD,IAAAA,IAAI,CAACJ,SAAL,GAAiBN,SAAS,CAACY,MAAV,EAAjB;AACAF,IAAAA,IAAI,CAACR,QAAL;AACD,GAJiB;;AAKlBW,EAAAA,SAAS,CAACC,QAAD,EAAW;AAClBJ,IAAAA,IAAI,CAACH,KAAL,GAAa,EAAb;AACA,UAAM;AAAEA,MAAAA;AAAF,QAAYO,QAAlB;AACAP,IAAAA,KAAK,CAACQ,OAAN,CAAeC,IAAD,IAAU;AACtB,UAAIC,OAAO,GAAGhB,IAAI,CAACW,MAAL,EAAd;AACAK,MAAAA,OAAO,CAACC,WAAR,CAAoBF,IAAI,CAACG,QAAzB;AACAF,MAAAA,OAAO,CAACG,YAAR,CAAqBJ,IAAI,CAACK,SAA1B;AACAJ,MAAAA,OAAO,CAACK,WAAR,CAAoBN,IAAI,CAACO,QAAzB;AACAb,MAAAA,IAAI,CAACH,KAAL,CAAWiB,IAAX,CAAgBP,OAAhB;AACD,KAND;AAOD,GAfiB;;AAgBlB,QAAMf,QAAN,GAAiB;AACf,QAAIY,QAAJ;;AACA,QAAI;AACFA,MAAAA,QAAQ,GAAG,MAAMZ,QAAQ,EAAzB;AACAQ,MAAAA,IAAI,CAACG,SAAL,CAAeC,QAAf;AACD,KAHD,CAGE,OAAOW,KAAP,EAAc;AACd,UAAIC,OAAO,GAAGD,KAAd;AACD;AACF,GAxBiB;;AAyBlB,QAAMtB,OAAN,CAAckB,SAAd,EAAyBE,QAAzB,EAAmCJ,QAAnC,EAA6C;AAC3C,QAAIL,QAAJ;AACA,QAAIa,eAAJ;;AACA,QAAI;AACFb,MAAAA,QAAQ,GAAG,MAAMX,OAAO,CAACkB,SAAD,EAAYE,QAAZ,EAAsBJ,QAAtB,CAAxB;AACAQ,MAAAA,eAAe,GAAG,MAAMjB,IAAI,CAACR,QAAL,EAAxB;AACD,KAHD,CAGE,OAAOuB,KAAP,EAAc;AACd,UAAIC,OAAO,GAAGD,KAAd;AACD;AACF;;AAlCiB,CAAX,CALgB,CAApB","sourcesContent":["import { types } from 'mobx-state-tree';\nimport { ViewStore } from './ViewStore';\nimport { User } from './User';\nimport { getUsers, addUser } from '../api/User';\n\nexport const GlobalStore = types\n  .model('GlobalStore', {\n    viewStore: ViewStore,\n    users: types.array(User),\n  })\n  .actions((self) => ({\n    loadSelf() {\n      self.viewStore = ViewStore.create()\n      self.getUsers()\n    },\n    loadUsers(response) {\n      self.users = []\n      const { users } = response\n      users.forEach((user) => {\n        let newUser = User.create()\n        newUser.setUserName(user.userName)\n        newUser.setFirstName(user.firstName)\n        newUser.setLastName(user.lastName)\n        self.users.push(newUser)\n      })\n    },\n    async getUsers() {\n      let response\n      try {\n        response = await getUsers()\n        self.loadUsers(response)\n      } catch (error) {\n        let message = error\n      }\n    },\n    async addUser(firstName, lastName, userName) {\n      let response\n      let anotherResponse\n      try {\n        response = await addUser(firstName, lastName, userName)\n        anotherResponse = await self.getUsers()\n      } catch (error) {\n        let message = error\n      }\n    }\n  }));\n"]},"metadata":{},"sourceType":"module"}